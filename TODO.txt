MODUS TO DO

- Switch to url-style module names. Example:
  
    Modus.module('App/Foo', function (Foo) {
      ...
    });

- In line with the above, have a "normalizeModuleName" function
  that makes sure all module names follow the same pattern, and 
  have 'getMappedPath' always return ONLY a url.

    Modus.normalizeModuleName('App/Foo.js'); // = 'App/Foo'
    Modus.getMappedPath('App/Foo'); // = '[RootPath]/App/Foo.js'
    Modus.getMappedPath('App/Templates/Foo.txt'); // = '[RootPath]/App/Foo.txt'

- When saving modules, just save them by their (normalized) name,
  don't try to do that weird 'module.modules' thing.

    Modus.env['App/Foo'];
    Modus.env['App/Bar'];

    // And so on.

- Drop 'namespace', just implicitly define the namespace
  from the module name.

    Modus.module('App/Bar/Foo', function (Foo) {
      // This module's namespace is 'App/Bar'.
      // When we import something that is prefixed with './' we
      // import from the 'App/Bar' namespace.
      Foo.imports(['Baz', 'Bax']).from('./Bar'); // Imports from 'App/Bar/Bar'
      // In keeping with the filesytem-like syntax we're using,
      // '../' will go up a level in the namespace path
      // (In this case, 'App').
      Foo.imports('../Ban'); // Imports 'App/Ban'
      // A full path will ignore the current namespace.
      Foo.imports('Libs/Foo/Bar');
    });

- Implement a simple compiler. Should keep all the wrapper functions, just
  put them all into one file. This will require including the entire Modus
  library, but look into a stripped down version that could be included
  instead for the future (or just strip as much as possible out of Modus as
  you can).